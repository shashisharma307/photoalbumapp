version: "2.1"
services:

 # zookeeper:
 #   image: wurstmeister/zookeeper
 #   container_name: zookeeper
 #   restart: always
 #   ports:
 #     - "2181:2181"
 #   networks:
 #     - test
 # kakfa:
 #   image: wurstmeister/kafka
 #   container_name: kafka
 #   restart: always
 #   links:
 #     - zookeeper:zookeeper
 #   ports:
 #     - "9092:9092"
 #   networks:
 #     - test
 #   environment:
 #     KAFKA_BROKER_ID: 1
 #     KAFKA_ADVERTISED_HOST_NAME: kafka
 #     KAFKA_ADVERTISED_PORT: 9092
 #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
 #     KAFKA_ADVERTISED_LISTENERS: 127.0.0.1:9092
 #     KAFKA_CREATE_TOPICS: "testtopic"
 #   depends_on:
 #     - zookeeper

#  zookeeper:
#    image: 'bitnami/zookeeper:latest'
#    hostname: zookeeper
#    restart: unless-stopped
#    ports:
#      - '2181:2181'
#    environment:
#      - ALLOW_ANONYMOUS_LOGIN=yes
#    #volumes:
#    #  - ./data/zookeeper:/bitnami/zookeeper
#
#  kafka:
#    image: 'bitnami/kafka:latest'
#    hostname: kafka
#    restart: unless-stopped
#    ports:
#      - '9092:9092'
#    environment:
#      - KAFKA_BROKER_ID=1
#      - KAFKA_LISTENERS=PLAINTEXT://:9092
#      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
#      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
#      - ALLOW_PLAINTEXT_LISTENER=yes
#    volumes:
#      - ./data/kafka:/bitnami/kafka
#
 
#  zookeeper:
#     image: confluent/zookeeper
#     container_name: zookeeper
#     ports:
#       - "2181:2181"
#     environment:
#       zk_id: "1"
#     networks:
#       - test
#
#  kafka:
#     image: confluent/kafka
#     container_name: kafka
#     depends_on:
#       - zookeeper
#     ports:
#       - "9092:9092"
#     environment:
#       KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
#     networks:
#       - test
 
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.0
    container_name: zookeeper
    networks: 
      - test
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  broker:
    image: confluentinc/cp-kafka:5.5.0
    container_name: broker
    networks: 
      - test
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  client:
    image: python_kafka_test_client
    container_name: python_kafka_test_client
    depends_on: 
      - broker
    networks: 
      - test
    entrypoint: 
      - bash 
      - -c 
      - |
        echo 'Giving Kafka a bit of time to start upâ€¦'
        sleep 30
        # Run the client code
        python /python_kafka_test_client.py broker:9092
#
  mysqldb:
    container_name: mysql
    image: mysql:5.6
    environment:
      #- MYSQL_USER= root
      - MYSQL_ROOT_PASSWORD=root
      #- MYSQL_ALLOW_EMPTY_PASSWORD=yes
    entrypoint:
      sh -c "
      echo 'CREATE DATABASE IF NOT EXISTS photoalbum;' > /docker-entrypoint-initdb.d/init.sql;
      /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
      "
    ports:
      - 3306:3306
    networks:
        - test


  photoalbum:
    container_name: photoapp
    image: photo-kafka:1.1
    depends_on:
       - mysqldb
      #  - kafka
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "1"
    restart: always
    ports:
      - 9191:9191
    networks:
      - test

networks:
  test:
    driver: bridge
